@page "/"

@inject NavigationManager NavigationManager
@inject IRecipeService RecipeService

@using MauiCookbook.Models
@using MauiCookbook.Services
@using System.Reflection
@using MobileCookbook.Utils

<div class="input-group mb-3">
    <input type="text" class="form-control" style="width: 45%;" placeholder="Search name or ingredient" aria-label="Text input with dropdown button" @bind="@searchQuery" @bind:event="oninput" />
    <select class="form-select dropdown-toggle" aria-label="Dropdown button" @bind="selectedMealType">
        @foreach (var type in Enum.GetValues(typeof(RecipeTypes)))
        {
            <option value="@type">@type</option>
        }
    </select>
</div>

<button class="btn btn-success mb-3" @onclick="NavigateToAddRecipe">
    <i class="bi bi-plus-lg"></i> Add New Recipe
</button>

<div class="">
    <div class="row">
        @if (recipes == null)
        {
            <p class="text-center">Loading...</p>
        }
        else
        {
            @foreach (var recipe in FilteredRecipes)
            {
                <div class="col-md-4 mb-1">
                    <a @onclick="() => GoToRecipe(recipe.ID)" class="text-decoration-none">
                        <div class="card h-100 shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@recipe.RecipeName</h5>
                            </div>
                            <div class="card-footer d-flex justify-content-between align-items-center">
                                <small class="text-muted">Cook time: @recipe.CookTime minutes</small>
                                <button class="btn btn-outline-primary btn-sm" @onclick:stopPropagation="true" @onclick="() => EditRecipe(recipe.ID)">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </button>
                            </div>
                        </div>
                    </a>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<Recipe> recipes;
    // private Dictionary<int, string> recipeImages = new Dictionary<int, string>();

    private string searchQuery = "";
    private RecipeTypes selectedMealType = RecipeTypes.Any;

    private IEnumerable<Recipe> FilteredRecipes =>
        recipes.Where(r => (r.RecipeName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            r.Ingredients.Any(i => i.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))) &&
                            (selectedMealType == RecipeTypes.Any || r.RecipeType == selectedMealType));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            recipes = await RecipeService.GetAllRecipesAsync();

            //loading all recipe images
            // foreach (var recipe in recipes)
            // {
            //     if (!string.IsNullOrEmpty(recipe.ImageAddress) && !recipeImages.ContainsKey(recipe.ID))
            //     {
            //         var base64Image = await ImageService.LoadImageFromStorage(recipe.ImageAddress);
            //         recipeImages[recipe.ID] = base64Image;
            //     }
            // }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"error -----> : {ex.Message}");
            // Optionally, set a flag to display an error message in the UI
        }
    }

    private void GoToRecipe(int recipeID)
    {
        NavigationManager.NavigateTo($"/recipe/{recipeID}");
    }

    private string GetImageSource(Recipe recipe)
    {
        if (!string.IsNullOrEmpty(recipe.ImageAddress))
        {
            return $"data:image/png;base64,{ImageService.LoadImageFromStorage(recipe.ImageAddress).Result}";
        }else return null;
    }

    private void NavigateToAddRecipe()
    {
        NavigationManager.NavigateTo("/newrecipe");
    }

    private void EditRecipe(int recipeId)
    {
        NavigationManager.NavigateTo($"/newrecipe/{recipeId}");
    }
}
