@page "/newrecipe"
@page "/newrecipe/{RecipeId:int}"
@using CommunityToolkit.Maui.Core
@using CommunityToolkit.Maui.Core.Platform
@using MauiCookbook.Models
@using MauiCookbook.Services
@using MobileCookbook.Services
@using CommunityToolkit.Maui.Alerts;
@using MobileCookbook.Utils


@inject IRecipeService RecipeService
@inject IShoppingListService shoppinglistService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h3 class="text-center my-4">Add New Recipe</h3>

<div class="container" style="overflow-y: auto; height: 100vh;">

    <div class="row my-4">
        <div class="col text-center">
            <button class="btn btn-primary" @onclick="PickImage">Pick Image from Gallery</button>
            <button class="btn btn-secondary" @onclick="TakePhoto">Take a New Picture</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(base64Image))
    {
        <div class="row">
            <div class="col text-center">
                <img src="data:image/png;base64,@base64Image" alt="Selected Image" class="img-fluid" />
            </div>
        </div>
    }
    else
    {
        <p>no photo selected!</p>
    }

    <form @onsubmit="HandleSubmit">
        @if (RecipeId.HasValue)
        {
            <div class="mb-3 text-end">
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                    Delete Recipe
                </button>
            </div>
        }
        <div class="mb-3">
            <label for="recipeName" class="form-label">Recipe Name</label>
            <input type="text" class="form-control" id="recipeName" @bind="recipe.RecipeName">
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" @bind="recipe.Description"></textarea>
        </div>

        <div class="mb-3">
            <label for="cookTime" class="form-label">Cook Time (minutes)</label>
            <input type="number" class="form-control" id="cookTime" @bind="recipe.CookTime">
        </div>

        <div class="mb-3">
            <label for="type" class="form-label">Type</label>
            <select class="form-control" id="type" @bind="recipe.RecipeType">
                @foreach (var type in Enum.GetValues<RecipeTypes>())
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="portions" class="form-label">Portions</label>
            <input type="number" class="form-control" id="portions" @bind="recipe.Portions" min="1" max="99" />
        </div>

        <div class="mb-3">
            <label class="form-label">Steps:</label>
            @foreach (var step in recipe.Steps)
            {
                <p class="ps-3">@step</p>
                <button @onclick="() => RemoveStep(step)">del</button>
            }
            <div class="input-group mb-3">
                <input type="text" class="form-control" @bind="newStepName" placeholder="Add a step">
                <button class="btn btn-outline-secondary" type="button" @onclick="AddStep">Add</button>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Ingredients:</label>
            @if (ingredients.Count == 0)
            {
                <p>No ingredients added yet.</p>
            }
            else
            {
                @foreach (var ingr in ingredients)
                {
                    <p class="ps-3">@ingr.Name (@ingr.Quantity @ingr.Unit)</p>
                    <button @onclick="() => RemoveIngr(ingr)">del</button>
                }
            }
            <div class="row g-3">
                <div class="col">
                    <input type="text" class="form-control" @bind="newIngr.Name" placeholder="Ingredient name">
                </div>
                <div class="col">
                    <input type="number" class="form-control" @bind="newIngr.Quantity" placeholder="Amount">
                </div>
                <div class="col">
                    <input type="text" class="form-control" @bind="newIngr.Unit" placeholder="Unit">
                </div>
                <div class="col-auto">
                    <button class="btn btn-outline-secondary" type="button" @onclick="AddNewIngredient">Add</button>
                </div>
            </div>
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-primary">@SaveBtnText</button>
        </div>
    </form>

    @* for the g'damn soft keyboard overlapping *@
    <div style="width: 100vw; height: 45vh;">
        <!-- Content here -->
    </div>
</div>

@code {
    private Recipe recipe = new Recipe();
    private string newStepName = "";
    private Ingredient newIngr = new();
    private List<Ingredient> ingredients = new();
    private string SaveBtnText = "Add";

    [Parameter]
    public int? RecipeId { get; set; }

    private string base64Image;

    protected override async Task OnInitializedAsync()
    {
        if (RecipeId.HasValue)
        {
            recipe = await RecipeService.GetRecipeByIdAsync(RecipeId.Value);
            ingredients = recipe.Ingredients;

            if (!string.IsNullOrEmpty(recipe.ImageAddress))
            {
                base64Image = await LoadImageFromPath(recipe.ImageAddress);
            }
            SaveBtnText = "Update";
        }
        else
        {
            recipe = new Recipe() { RecipeName = "not set" };
        }
    }

    private async Task<string> LoadImageFromPath(string imagePath)
    {
        try
        {
            if (File.Exists(imagePath))
            {
                byte[] imageBytes = await File.ReadAllBytesAsync(imagePath);
                return Convert.ToBase64String(imageBytes);
            }
            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading image: {ex.Message}");
            return null;
        }
    }

    private async Task PickImage()
    {
        var imageBase64 = await ImageService.PickImage();
        if (!string.IsNullOrWhiteSpace(imageBase64))
        {
            base64Image = imageBase64;
        }
    }

    private async Task TakePhoto()
    {
        var imageBase64 = await ImageService.TakePhoto();
        if (!string.IsNullOrWhiteSpace(imageBase64))
        {
            base64Image = imageBase64;
        }
    }

    private async Task SaveImageAndSetPath()
    {
        if (!string.IsNullOrEmpty(base64Image))
        {
            string fileName = $"{Guid.NewGuid()}.png"; // Generates a unique file name
            var savedImagePath = await ImageService.SaveImageToLocalStorage(base64Image, fileName);
            if (!string.IsNullOrEmpty(savedImagePath))
            {
                recipe.ImageAddress = savedImagePath;
            }
        }
    }

    private void RemoveStep(string step)
    {
        recipe.Steps.Remove(step);
    }

    private async void RemoveIngr(Ingredient ingr)
    {
        //remove ingredient from its separate db table
        await RecipeService.DeleteIngredient(ingr);
        recipe.Ingredients.Remove(ingr);
    }

    private void AddNewIngredient()
    {
        newIngr.RecipeId = recipe.ID;
        ingredients.Add(newIngr);
        newIngr = new();
    }

    private async Task HandleSubmit()
    {
        //add to save ignredients to its own table and add reference to the id of the right recipe
        try
        {
            if (RecipeId.HasValue)
            {
                await SaveImageAndSetPath();
                await RecipeService.UpdateRecipeAsync(recipe);
            }
            else
            {
                await SaveImageAndSetPath();
                await RecipeService.AddRecipeAsync(recipe, ingredients);
            }
            // Console.WriteLine("-----success----");

            // currently it goes back but forward in navigation stack
            // recipies -> edit/add -> recipies || should be recipes -> <- edit/add

            // NavigationManager.NavigateTo("/recipes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"error ----> {ex.Message}");
        }
    }

    private void AddStep()
    {
        recipe.Steps.Add(newStepName);
        newStepName = "";
    }

    private async Task ConfirmDelete()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this recipe?");
        if (confirmed)
        {
            await DeleteRecipe();
        }
    }

    private async Task DeleteRecipe()
    {
        if (RecipeId.HasValue)
        {
            await RecipeService.DeleteRecipeAsync(RecipeId.Value);
            NavigationManager.NavigateTo("/recipes"); 
        }
    }


}
