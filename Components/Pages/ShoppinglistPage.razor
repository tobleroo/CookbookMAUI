@page "/shoppinglist"
@using MobileCookbook.Models
@using MobileCookbook.Services

@inject IShoppingListService ShoppingListService

<div class="d-flex align-items-center mb-3">
    <h3 class="mb-0 flex-grow-1">ShoppinglistPage</h3>
    <button class="btn btn-outline-secondary" @onclick="RemoveCheckedItems">
        <i class="bi bi-arrow-repeat"></i> Update
    </button>
</div>

<div>
    <h4>Ingredients to Buy:</h4>
    @if (shoppingList.IngredientsToBuy.Any())
    {
        <ul class="list-unstyled">
            @foreach (var item in shoppingList.IngredientsToBuy)
            {
                <li>
                    <div class="row">
                        <div class="col-auto">
                            <input type="checkbox" checked="@item.Value" @onclick="@(() => ToggleCheckedState(item.Key))" />
                        </div>
                        <div class="col">
                            @item.Key
                        </div>
                        <div class="col">
                            <button class="btn btn-outline-secondary btn-sm" @onclick="@(() => RemoveItem(item.Key))">
                                <i class="bi bi-dash-circle"></i>
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p>No ingredients to buy.</p>
    }

    <h4>Extra Items to Buy:</h4>
    @if (shoppingList.ExtraItemstoBuy.Any())
    {
        <ul class="list-unstyled">
            @foreach (var item in shoppingList.ExtraItemstoBuy)
            {
                <li>
                    <div class="row">
                        <div class="col-auto">
                            <input type="checkbox" checked="@item.Value" @onclick="@(() => ToggleCheckedState(item.Key, true))" />
                        </div>
                        <div class="col">
                            @item.Key
                        </div>
                        <div class="col">
                            <button class="btn btn-outline-secondary btn-sm" @onclick="@(() => RemoveExtraItem(item.Key))">
                                <i class="bi bi-dash-circle"></i>
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p>No extra items to buy.</p>
    }

    <h4>Add Extra Item:</h4>
    <div class="input-group mb-3 position-relative">
        <input type="text" class="form-control" placeholder="Enter new item"
               @bind="newExtraItem" @oninput="@(e => FilterItems(e.Value.ToString()))">
        <button class="btn btn-primary" @onclick="AddExtraItem">Add</button>

        @if (filteredItems.Any())
        {
            <ul class="list-group position-absolute" style="z-index: 1000; top: 100%; left: 0; width: 100%;">
                @foreach (var item in filteredItems)
                {
                    <li class="list-group-item" @onclick="() => SelectItem(item)">
                        @item
                    </li>
                }
            </ul>
        }
    </div>

    @* demo to see if it adds the dates *@
    @* <div>
        <h2>DEMO</h2>
        @foreach (var item in history)
        {
            <p>Name: @item.Name</p>
            <p>Times Bought:</p>
            <ul>
                @foreach (var time in item.TimesBought)
                {
                    <li>@time.ToShortDateString()</li>
                }
            </ul>
        }
    </div> *@

    @* recoomendations *@
    <div class="container mt-3">
        <h3>Rebuy Recommendations</h3>
        <ul class="list-group">
            @foreach (string item in recommendations)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @item
                    <span class="badge bg-primary rounded-pill" @onclick="() => AddRebuyItemToList(item)">Rebuy</span>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    private ShoppingList shoppingList = new();

    //demo purpose only
    private List<IngredientHistoryData> history = new();
    private List<string> recommendations = new();

    private List<string> allPossibleItems = new();
    // private List<string> allPossibleItems = new List<string> { "Bread", "Banana", "Butter", "Milk", "Eggs", "Apples" };
    private List<string> filteredItems = new List<string>();
    private string newExtraItem;
    private string errorMessage;

    private void SelectItem(string item)
    {
        newExtraItem = item;
        filteredItems.Clear();
    }

    private void FilterItems(string searchText)
    {
        filteredItems.Clear(); // Clear the existing items

        if (string.IsNullOrWhiteSpace(searchText))
        {
            return; // If the search text is null or whitespace, do nothing
        }

        searchText = searchText.ToLower(); // Convert search text to lower case for case-insensitive comparison

        foreach (var item in allPossibleItems)
        {
            if (item.ToLower().Contains(searchText))
            {
                filteredItems.Add(item); // Add the item if it contains the search text
            }
        }

        StateHasChanged();
    }

    private async void ToggleCheckedState(string itemKey, bool isExtraItem = false)
    {
        if (isExtraItem)
        {
            if (shoppingList.ExtraItemstoBuy.ContainsKey(itemKey))
            {
                shoppingList.ExtraItemstoBuy[itemKey] = !shoppingList.ExtraItemstoBuy[itemKey];
            }
        }
        else
        {
            if (shoppingList.IngredientsToBuy.ContainsKey(itemKey))
            {
                shoppingList.IngredientsToBuy[itemKey] = !shoppingList.IngredientsToBuy[itemKey];
            }
        }
        //update db with the new change
        await ShoppingListService.UpdateShoppingListAsync(shoppingList);
        history = await ShoppingListService.GetIngredientHistory();
        StateHasChanged();
    }

    private async void RemoveCheckedItems()
    {
        //run thru all checked and add a date to its history
        foreach(var ingr in shoppingList.IngredientsToBuy)
        {
            if(ingr.Value == true)
            {
                //do the operation of adding to db
                await ShoppingListService.AddDateToCheckedIngredient(ingr.Key);
            }
        }

        //do same for extra items
        foreach (var ingr in shoppingList.ExtraItemstoBuy)
        {
            if (ingr.Value == true)
            {
                //do the operation of adding to db
                await ShoppingListService.AddDateToCheckedIngredient(ingr.Key);
            }
        }

        //clear both lists of checked items
        shoppingList.IngredientsToBuy = shoppingList.IngredientsToBuy
                                    .Where(item => item.Value == false)
                                    .ToDictionary(item => item.Key, item => item.Value);

        shoppingList.ExtraItemstoBuy = shoppingList.ExtraItemstoBuy
                                    .Where(item => item.Value == false)
                                    .ToDictionary(item => item.Key, item => item.Value);

        //resave to db
        await ShoppingListService.UpdateShoppingListAsync(shoppingList);
        StateHasChanged();
    }

    private async Task RemoveItem(string item)
    {
        if (shoppingList.IngredientsToBuy.ContainsKey(item))
        {
            shoppingList.IngredientsToBuy.Remove(item);
            await ShoppingListService.UpdateShoppingListAsync(shoppingList);
            StateHasChanged();
        }
    }

    private async Task RemoveExtraItem(string item)
    {
        if (shoppingList.ExtraItemstoBuy.ContainsKey(item))
        {
            shoppingList.ExtraItemstoBuy.Remove(item);
            await ShoppingListService.UpdateShoppingListAsync(shoppingList);
            StateHasChanged();
        }
    }

    private async Task AddExtraItem()
    {
        //if shoppinglsit id is 0, then it does not yet exists and cannot be updated, so save new shoppinglsit first
        if(shoppingList.Id == 0)
        {
            await ShoppingListService.SaveNewShopinglist(shoppingList);
        }

        if (!string.IsNullOrWhiteSpace(newExtraItem))
        {
            shoppingList.ExtraItemstoBuy.Add(newExtraItem, false);
            newExtraItem = string.Empty;

            // Update the shopping list in the database
            try
            {
                var success = await ShoppingListService.UpdateShoppingListAsync(shoppingList);
                if (!success)
                {
                    errorMessage = "Failed to update the shopping list.";
                }
                else
                {
                    shoppingList = await ShoppingListService.GetShoppingList();
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error: {ex.Message}";
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            shoppingList = await ShoppingListService.GetShoppingList();
            history = await ShoppingListService.GetIngredientHistory();

            //for the add extra suggestion list
            allPossibleItems = history.Select(h => h.Name).Distinct().ToList();

            recommendations = ShoppingListService.GetRebuyRecommendations(history);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"error ---> {ex.Message}");
        }
    }

    private async Task AddRebuyItemToList(string item)
    {
        shoppingList.ExtraItemstoBuy.Add(item, false);
        await ShoppingListService.UpdateShoppingListAsync(shoppingList);
        StateHasChanged();
    }
}